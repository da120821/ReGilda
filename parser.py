from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time
import json
import pandas as pd
import re
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

cookies_file = 'cookies.json'


def setup_driver():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è Browserless"""
    chrome_options = Options()

    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è Chrome
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--ignore-certificate-errors")
    chrome_options.add_argument("--ignore-ssl-errors")
    chrome_options.add_argument("--allow-insecure-localhost")
    chrome_options.add_argument("--allow-running-insecure-content")

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
        browser_token = os.environ.get('BROWSER_TOKEN', '1gk2gW97XgdGHg9kZeEsefMW0GrfP49md66r48BWwFADYm3j')

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π endpoint –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        browserless_endpoint = os.environ.get(
            'BROWSER_WEBDRIVER_ENDPOINT',
            'https://browserless-browserless.up.railway.app/webdriver'
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —Ç–æ–∫–µ–Ω–æ–º
        if '?' in browserless_endpoint:
            webdriver_url = f"{browserless_endpoint}&token={browser_token}"
        else:
            webdriver_url = f"{browserless_endpoint}?token={browser_token}"

        print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Browserless: {webdriver_url}")

        driver = webdriver.Remote(
            command_executor=webdriver_url,
            options=chrome_options
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
        driver.set_page_load_timeout(30)
        driver.implicitly_wait(10)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Browserless")
        return driver

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Browserless: {e}")
        return None


def check_browserless_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Browserless"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Browserless...")

    try:
        driver = setup_driver()
        if driver:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
            driver.get("https://www.google.com")
            title = driver.title
            driver.quit()
            print(f"‚úÖ Browserless –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            return True
        else:
            print("‚ùå Browserless –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Browserless: {e}")
        return False


def parse_table_for_service(url):
    return parse_table(url)


def normalize_username(username):
    """–£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å U –∏–∑ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if username and username.startswith('U') and len(username) > 1:
        if username[1].isupper():
            return username[1:]
    return username


def clean_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç NBSP –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not text:
        return text
    text = text.replace('\u00a0', ' ').replace('\u2007', ' ').replace('\u202f', ' ')
    text = re.sub(r'\s+', ' ', text).strip()
    return text


def extract_user_data(user_cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —è—á–µ–π–∫–∏"""
    try:
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π span —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name_span = user_cell.find('span', class_='font-medium')
        if name_span:
            return clean_text(name_span.get_text())

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        name_elements = user_cell.find_all(text=True)
        for text in name_elements:
            cleaned = clean_text(text)
            if cleaned and cleaned not in ['', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'User']:
                return cleaned

        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    except:
        return "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"


def extract_amount_data(amount_cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –∏–∑ —è—á–µ–π–∫–∏"""
    try:
        # –ò—â–µ–º badge —Å —Å—É–º–º–æ–π
        badge = amount_cell.find('div', {'data-slot': 'badge'})
        if badge:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –∏–∫–æ–Ω–∫–∏
            text_parts = []
            for element in badge.contents:
                if element.name == 'svg':
                    break
                if hasattr(element, 'get_text'):
                    text_parts.append(element.get_text())
                else:
                    text_parts.append(str(element))

            amount_text = ''.join(text_parts).strip()
            return clean_text(amount_text)

        return "0"
    except:
        return "0"


def extract_date_data(date_cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏–∑ —è—á–µ–π–∫–∏"""
    try:
        date_span = date_cell.find('span', class_='text-muted-foreground')
        if date_span:
            return clean_text(date_span.get_text())

        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"


def convert_amount_to_int(amount_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—É–º–º—ã '1 500' –≤ —á–∏—Å–ª–æ 1500"""
    try:
        if isinstance(amount_str, (int, float)):
            return int(amount_str)

        if isinstance(amount_str, str):
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            cleaned = re.sub(r'[^\d]', '', amount_str)
            if cleaned:
                return int(cleaned)

        return 0
    except:
        return 0


def extract_guild_name_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –∏–∑ URL"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å URL –º–µ–∂–¥—É /guild/ –∏ /settings
        match = re.search(r'/guild/([^/]+)', url)
        if match:
            guild_slug = match.group(1)

            print(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ URL: {guild_slug}")

            # –£–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤ –∫–æ–Ω—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, --a1172e3f)
            guild_slug_clean = re.sub(r'--[a-f0-9]{8}$', '', guild_slug)

            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–ª–∞—Å—å –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π slug
            if not guild_slug_clean:
                guild_slug_clean = guild_slug

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º slug –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            guild_name = guild_slug_clean.replace('-', ' ')

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π title case
            guild_name = ' '.join(word.capitalize() for word in guild_name.split())

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä —Ç–∏–ø–∞ "I G G D R A S I L"
            if len(guild_name) > 10 and ' ' in guild_name:
                # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±—É–∫–≤, –ø—Ä–æ–±—É–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Ö
                words = guild_name.split()
                if all(len(word) == 1 for word in words):
                    guild_name = ''.join(words).capitalize()

            print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤: '{guild_name}'")
            return guild_name

        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥–∏–ª—å–¥–∏—è"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–∏–ª—å–¥–∏–∏: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥–∏–ª—å–¥–∏—è"


def load_cookies(driver):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä"""
    try:
        cookies = None
        cookies_json = os.getenv('COOKIES_JSON')

        if cookies_json:
            cookies = json.loads(cookies_json)
            print("‚úÖ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        elif os.path.exists(cookies_file):
            with open(cookies_file, 'r', encoding='utf-8') as file:
                cookies = json.load(file)
            print("‚úÖ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
        else:
            print("‚ùå –ö—É–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∏ –≤ —Ñ–∞–π–ª–µ")
            return False

        # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ–º–µ–Ω, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏
        print("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ–º–µ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫...")
        driver.get("https://remanga.org")
        time.sleep(3)

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        driver.delete_all_cookies()

        cookies_added = 0
        for cookie in cookies:
            try:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å
                cookie_copy = {k: v for k, v in cookie.items()
                               if k in ['name', 'value', 'domain', 'path', 'expiry', 'secure', 'httpOnly']}

                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–æ–º–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                if 'domain' in cookie_copy:
                    if cookie_copy['domain'].startswith('.'):
                        cookie_copy['domain'] = cookie_copy['domain'][1:]
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–æ–º–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç remanga.org
                    if 'remanga.org' not in cookie_copy['domain']:
                        continue

                driver.add_cookie(cookie_copy)
                cookies_added += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É–∫–∏ {cookie.get('name')}: {e}")

        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {cookies_added} –∫—É–∫–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏
        current_cookies = driver.get_cookies()
        print(f"üìä –¢–µ–∫—É—â–∏–µ –∫—É–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {len(current_cookies)}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–∏: {e}")
        return False


def parse_table(url='https://remanga.org/guild/i-g-g-d-r-a-s-i-l--a1172e3f/settings/donations'):
    """
    –ü–∞—Ä—Å–∏—Ç –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –±—É—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Browserless
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not check_browserless_connection():
        print("‚ùå Browserless –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
        return pd.DataFrame()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ Browserless
    driver = setup_driver()
    if not driver:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Browserless")
        return pd.DataFrame()

    wait = WebDriverWait(driver, 30)
    rows_data = []
    seen_records = set()
    previous_count = 0
    no_new_count = 0
    max_scroll_attempts = 20

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏
        guild_name = extract_guild_name_from_url(url)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–∫–∏ –î–û –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–∫–∏...")
        cookies_loaded = load_cookies(driver)

        if not cookies_loaded:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∏—Ö...")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–∏–ª—å–¥–∏–∏ '{guild_name}'...")
        driver.get(url)
        time.sleep(5)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        current_url = driver.current_url
        if "remanga.org" not in current_url:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É. –¢–µ–∫—É—â–∏–π URL: {current_url}")
            return pd.DataFrame()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–æ –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        if "login" in current_url or "signin" in current_url:
            print("‚ùå –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞. –ö—É–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏.")
            return pd.DataFrame()

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        print("–û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã...")
        try:
            wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, "div[data-sentry-component*='Donations'], div[class*='table'], table")))
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ –Ω–∞–¥–µ–∂–¥–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –µ—Å—Ç—å

        print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö... (5 —Å–µ–∫—É–Ω–¥)")
        time.sleep(5)

        print("–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π...")

        for attempt in range(max_scroll_attempts):
            # –ü–æ–ª—É—á–∞–µ–º HTML
            page_html = driver.page_source
            soup = BeautifulSoup(page_html, 'html.parser')

            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            table_selectors = [
                'div[data-sentry-component="VirtualizedDataTable"]',
                'div[data-sentry-component="GuildDonationsList"]',
                'div[class*="table"]',
                'table'
            ]

            table_container = None
            for selector in table_selectors:
                table_container = soup.select_one(selector)
                if table_container:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    break

            if not table_container:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ HTML")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                with open('debug_page.html', 'w', encoding='utf-8') as f:
                    f.write(page_html)
                print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: debug_page.html")
                break

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            rows = table_container.find_all('tr', style=re.compile(r'position:\s*absolute'))

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫
            if not rows:
                rows = table_container.find_all('tr')
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                rows = [row for row in rows if row.find('td')]

            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –Ω–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
            new_rows_found = 0
            for row in rows:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
                    cells = row.find_all(['td', 'th'])
                    if len(cells) < 3:
                        continue

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
                    user_cell, amount_cell, date_cell = cells[0], cells[1], cells[2]

                    user = extract_user_data(user_cell)
                    amount = extract_amount_data(amount_cell)
                    date = extract_date_data(date_cell)

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if not user or user in ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'User', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π']:
                        continue

                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                    row_id = f"{user}|{amount}|{date}"

                    if row_id not in seen_records:
                        rows_data.append([user, amount, date])
                        seen_records.add(row_id)
                        new_rows_found += 1

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
                    continue

            print(f"–°–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows_data)} (–Ω–æ–≤—ã—Ö: {new_rows_found})")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if len(rows_data) == previous_count:
                no_new_count += 1
                if no_new_count >= 3:
                    print("–ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                    break
            else:
                no_new_count = 0
                previous_count = len(rows_data)

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                scroll_selectors = [
                    "div[data-sentry-component='GuildDonationsList']",
                    "div[data-sentry-component='VirtualizedDataTable']",
                    ".table-container",
                    "div[class*='virtual']",
                    "body"
                ]

                for selector in scroll_selectors:
                    try:
                        element = driver.find_element(By.CSS_SELECTOR, selector)
                        driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", element)
                        print(f"‚úÖ –ü—Ä–æ–∫—Ä—É—á–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {selector}")
                        break
                    except:
                        continue
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                    print("‚úÖ –ü—Ä–æ–∫—Ä—É—á–µ–Ω–∞ –≤—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

                time.sleep(2)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {e}")

        print(f"\n=== –ó–ê–í–ï–†–®–ï–ù–û ===")
        print(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows_data)}")

        # –°–æ–∑–¥–∞–µ–º DataFrame
        if rows_data:
            df = pd.DataFrame(rows_data, columns=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–°—É–º–º–∞', '–î–∞—Ç–∞'])
            df = df.drop_duplicates()

            print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç...")
            df['–°—É–º–º–∞'] = df['–°—É–º–º–∞'].apply(convert_amount_to_int)

            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –±—É—Å—Ç–æ–≤:")
            print(f"  - –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –±—É—Å—Ç–æ–≤: {len(df)}")
            print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤: {df['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'].nunique()}")
            print(f"  - –û–±—â–∞—è —Å—É–º–º–∞ –±—É—Å—Ç–æ–≤: {df['–°—É–º–º–∞'].sum():,} ‚ö°")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            df.to_csv('donations_result.csv', index=False, encoding='utf-8')
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ donations_result.csv")

            return df
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É—Å—Ç–æ–≤")
            return pd.DataFrame()

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return pd.DataFrame()
    finally:
        print("–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        try:
            driver.quit()
        except:
            pass


# –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä...")

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if check_browserless_connection():
        result = parse_table()
        if not result.empty:
            print("‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ!")
            print(result.head())
        else:
            print("‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Browserless")