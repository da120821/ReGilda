from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.edge.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time
import json
import pandas as pd
import re
from database import db_manager

edge_driver_path = r'Driver_Notes/msedgedriver.exe'
cookies_file = 'cookies.json'

def parse_table_for_service(url):
    return parse_table(url)

def normalize_username(username):
    """–£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å U –∏–∑ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if username.startswith('U') and len(username) > 1:
        if username[1].isupper():
            return username[1:]
    return username


def clean_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç NBSP –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not text:
        return text
    text = text.replace('\u00a0', ' ').replace('\u2007', ' ').replace('\u202f', ' ')
    text = re.sub(r'\s+', ' ', text).strip()
    return text


def extract_user_data(user_cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —è—á–µ–π–∫–∏"""
    try:
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π span —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name_span = user_cell.find('span', class_='font-medium')
        if name_span:
            return clean_text(name_span.get_text())

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        name_elements = user_cell.find_all(text=True)
        for text in name_elements:
            cleaned = clean_text(text)
            if cleaned and cleaned not in ['', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'User']:
                return cleaned

        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    except:
        return "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"


def extract_amount_data(amount_cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –∏–∑ —è—á–µ–π–∫–∏"""
    try:
        # –ò—â–µ–º badge —Å —Å—É–º–º–æ–π
        badge = amount_cell.find('div', {'data-slot': 'badge'})
        if badge:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –∏–∫–æ–Ω–∫–∏
            text_parts = []
            for element in badge.contents:
                if element.name == 'svg':
                    break
                if hasattr(element, 'get_text'):
                    text_parts.append(element.get_text())
                else:
                    text_parts.append(str(element))

            amount_text = ''.join(text_parts).strip()
            return clean_text(amount_text)

        return "0"
    except:
        return "0"


def extract_date_data(date_cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏–∑ —è—á–µ–π–∫–∏"""
    try:
        date_span = date_cell.find('span', class_='text-muted-foreground')
        if date_span:
            return clean_text(date_span.get_text())

        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"


def convert_amount_to_int(amount_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—É–º–º—ã '1 500' –≤ —á–∏—Å–ª–æ 1500"""
    try:
        if isinstance(amount_str, (int, float)):
            return int(amount_str)

        if isinstance(amount_str, str):
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            cleaned = re.sub(r'[^\d]', '', amount_str)
            if cleaned:
                return int(cleaned)

        return 0
    except:
        return 0


def parse_table(url='https://remanga.org/guild/i-g-g-d-r-a-s-i-l--a1172e3f/settings/donations'):
    """
    –ü–∞—Ä—Å–∏—Ç –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –±—É—Å—Ç–æ–≤
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--window-size=1920,1080')
    options.add_argument(
        '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')

    service = Service(edge_driver_path)
    driver = webdriver.Edge(service=service, options=options)
    wait = WebDriverWait(driver, 120)

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
        print("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        driver.get(url)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–∫–∏
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–∫–∏...")
        try:
            with open(cookies_file, 'r') as file:
                cookies = json.load(file)
            for cookie in cookies:
                driver.add_cookie(cookie)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–∏: {e}")

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        driver.refresh()
        time.sleep(10)

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        print("–û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã...")
        wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "[data-sentry-component='VirtualizedDataTable']")))

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
        rows_data = []
        seen_records = set()
        previous_count = 0
        no_new_count = 0
        max_scroll_attempts = 50

        print("–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π...")

        for attempt in range(max_scroll_attempts):
            # –ü–æ–ª—É—á–∞–µ–º HTML
            page_html = driver.page_source
            soup = BeautifulSoup(page_html, 'html.parser')

            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
            table_container = soup.find('div', {'data-sentry-component': 'VirtualizedDataTable'})
            if not table_container:
                print("–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                break

            # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
            tbody = table_container.find('tbody', {'data-sentry-component': 'TableBody'})
            if not tbody:
                print("–¢–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                break

            # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            rows = tbody.find_all('tr', style=re.compile(r'position:\s*absolute'))

            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –Ω–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
            for row in rows:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
                    cells = row.find_all(['td', 'th'])
                    if len(cells) < 3:
                        continue

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
                    user_cell, amount_cell, date_cell = cells[0], cells[1], cells[2]

                    user = extract_user_data(user_cell)
                    amount = extract_amount_data(amount_cell)
                    date = extract_date_data(date_cell)

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if not user or user in ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'User', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π']:
                        continue

                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                    row_id = f"{user}|{amount}|{date}"

                    if row_id not in seen_records:
                        rows_data.append([user, amount, date])
                        seen_records.add(row_id)

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
                    continue

            print(f"–°–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows_data)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if len(rows_data) == previous_count:
                no_new_count += 1
                if no_new_count >= 5:
                    print("–ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                    break
            else:
                no_new_count = 0
                previous_count = len(rows_data)

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
            try:
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
                container = driver.find_element(By.CSS_SELECTOR, "[data-sentry-component='VirtualizedDataTable']")
                driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", container)
                time.sleep(2)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                driver.execute_script("window.scrollBy(0, 500);")
                time.sleep(1)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {e}")
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(2)

        print(f"\n=== –ó–ê–í–ï–†–®–ï–ù–û ===")
        print(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows_data)}")

        # –°–æ–∑–¥–∞–µ–º DataFrame
        if rows_data:
            df = pd.DataFrame(rows_data, columns=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–°—É–º–º–∞', '–î–∞—Ç–∞'])
            df = df.drop_duplicates()
            print(f"–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –±—É—Å—Ç–æ–≤: {len(df)}")

            print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç...")
            df['–°—É–º–º–∞'] = df['–°—É–º–º–∞'].apply(convert_amount_to_int)

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤—ã–º –±—É—Å—Ç–∞–º
            new_stats = db_manager.get_new_busters_stats(df)
            if new_stats:
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –±—É—Å—Ç–æ–≤:")
                print(f"  - –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –±—É—Å—Ç–æ–≤: {len(df)}")
                print(f"  - –ù–æ–≤—ã—Ö –±—É—Å—Ç–æ–≤: {new_stats['new_busters_count']}")
                print(f"  - –ù–æ–≤—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤: {new_stats['new_busters_users_count']}")
                print(f"  - –°—É–º–º–∞ –Ω–æ–≤—ã—Ö –±—É—Å—Ç–æ–≤: {new_stats['new_busters_amount']:,} ‚ö°")
                print(f"  - –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ: {len(df) - new_stats['new_busters_count']}")
            else:
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –±—É—Å—Ç–æ–≤:")
                print(f"  - –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –±—É—Å—Ç–æ–≤: {len(df)}")
                print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤: {df['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'].nunique()}")
                print(f"  - –û–±—â–∞—è —Å—É–º–º–∞ –±—É—Å—Ç–æ–≤: {df['–°—É–º–º–∞'].sum():,} ‚ö°")

            print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±—É—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            if db_manager.save_to_iggdrasil(df):
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –±—É—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É—Å—Ç–æ–≤ –≤ –ë–î")

            return df
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É—Å—Ç–æ–≤")
            return pd.DataFrame()

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return pd.DataFrame()
    finally:
        print("–ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        driver.quit()