from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from bs4 import BeautifulSoup
import time
import json
import pandas as pd
import re
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()


def setup_driver():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Selenium –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è standalone Chrome –Ω–∞ Railway"""
    chrome_options = Options()

    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è Railway
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--ignore-certificate-errors")
    chrome_options.add_argument("--ignore-ssl-errors")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")

    # –î–ª—è Railway –∏ –ø–æ–¥–æ–±–Ω—ã—Ö –æ–±–ª–∞—á–Ω—ã—Ö —Å—Ä–µ–¥
    chrome_options.add_argument("--remote-debugging-port=9222")
    chrome_options.add_argument("--disable-setuid-sandbox")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
    chrome_options.add_experimental_option('useAutomationExtension', False)

    # –ü—Ä–æ–∫—Å–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –†–§ —Å–∞–π—Ç–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    proxy_url = os.getenv('RUSSIAN_PROXY_URL')
    if proxy_url:
        chrome_options.add_argument(f'--proxy-server={proxy_url}')
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –†–§: {proxy_url}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º URL standalone Chrome —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        chrome_service_url = os.getenv('STANDALONE_CHROME_URL', 'http://standalone-chrome.railway.internal:4444')

        print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ standalone Chrome: {chrome_service_url}")

        driver = webdriver.Remote(
            command_executor=chrome_service_url,
            options=chrome_options
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
        driver.set_page_load_timeout(30)
        driver.implicitly_wait(10)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ standalone Chrome")
        return driver

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ standalone Chrome: {e}")

        # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Chrome
        try:
            print("üîÑ –ü—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Chrome –∫–∞–∫ fallback...")
            from selenium.webdriver.chrome.service import Service
            from webdriver_manager.chrome import ChromeDriverManager

            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π Chrome")
            return driver
        except Exception as e2:
            print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π Chrome —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
            return None


def check_browserless_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ standalone Chrome"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ standalone Chrome...")

    try:
        driver = setup_driver()
        if driver:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
            driver.get("https://www.google.com")
            title = driver.title
            driver.quit()
            print(f"‚úÖ Standalone Chrome –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            return True
        else:
            print("‚ùå Standalone Chrome –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ standalone Chrome: {e}")
        return False


def login_to_remanga(driver):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –Ω–∞ remanga.org —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è"""
    try:
        username = os.getenv('REMANGALOGIN_USERNAME')
        password = os.getenv('REMANGALOGIN_PASSWORD')

        if not username or not password:
            print("‚ùå –õ–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False

        print("üîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –Ω–∞ remanga.org...")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        main_url = "https://remanga.org"
        driver.get(main_url)
        time.sleep(5)

        print("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É '–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'...")

        # –ü–†–û–°–¢–û–ô –ò –ù–ê–î–ï–ñ–ù–´–ô –°–ü–û–°–û–ë - JavaScript –∫–ª–∏–∫
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É
            result = driver.execute_script("""
                // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
                var button = document.querySelector("button[data-sentry-component='UserAuthButtonMenuItem']");
                if (button) {
                    button.click();
                    console.log('‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
                    return true;
                } else {
                    console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    return false;
                }
            """)

            if result:
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ '–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' —á–µ—Ä–µ–∑ JavaScript")
            else:
                print("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ JavaScript")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ —á–µ—Ä–µ–∑ JavaScript: {e}")
            return False

        # –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
        print("‚è≥ –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...")
        time.sleep(3)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
        print("üîç –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...")

        # –ü–æ–ª–µ –ª–æ–≥–∏–Ω–∞
        try:
            username_field = driver.find_element(By.CSS_SELECTOR, "input[name='fields.login.user']")
            username_field.clear()
            username_field.send_keys(username)
            print("‚úÖ –í–≤–µ–ª–∏ –ª–æ–≥–∏–Ω")
            time.sleep(1)
        except:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞")
            return False

        # –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
        try:
            password_field = driver.find_element(By.CSS_SELECTOR, "input[name='fields.login.password']")
            password_field.clear()
            password_field.send_keys(password)
            print("‚úÖ –í–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å")
            time.sleep(1)
        except:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è")
            return False

        # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–í–æ–π—Ç–∏"
        try:
            submit_button = driver.find_element(By.XPATH, "//button[contains(text(), '–í–æ–π—Ç–∏')]")
            driver.execute_script("arguments[0].click();", submit_button)
            print("‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ '–í–æ–π—Ç–∏'")
        except:
            print("‚å®Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞–∂–∞—Ç–∏–µ–º Enter...")
            password_field.send_keys(Keys.RETURN)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞...")
        time.sleep(5)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
        current_url = driver.current_url
        print(f"üìÑ –¢–µ–∫—É—â–∏–π URL: {current_url}")

        if "signin" not in current_url and "login" not in current_url:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É: {e}")
        import traceback
        traceback.print_exc()
        return False

def clean_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç NBSP –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
    if not text:
        return text
    text = text.replace('\u00a0', ' ').replace('\u2007', ' ').replace('\u202f', ' ')
    text = re.sub(r'\s+', ' ', text).strip()
    return text


def extract_user_data(user_cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —è—á–µ–π–∫–∏"""
    try:
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π span —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name_span = user_cell.find('span', class_='font-medium')
        if name_span:
            return clean_text(name_span.get_text())

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º
        for class_name in ['font-medium', 'username', 'user-name']:
            name_element = user_cell.find(class_=class_name)
            if name_element:
                return clean_text(name_element.get_text())

        # –ü–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–º—É —Ç–µ–∫—Å—Ç—É
        name_elements = user_cell.find_all(text=True)
        for text in name_elements:
            cleaned = clean_text(text)
            if cleaned and cleaned not in ['', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'User', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π']:
                return cleaned

        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"


def extract_amount_data(amount_cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –∏–∑ —è—á–µ–π–∫–∏"""
    try:
        # –ò—â–µ–º badge —Å —Å—É–º–º–æ–π
        badge = amount_cell.find('div', {'data-slot': 'badge'})
        if badge:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –∏–∫–æ–Ω–∫–∏
            text_parts = []
            for element in badge.contents:
                if element.name == 'svg':
                    break
                if hasattr(element, 'get_text'):
                    text_parts.append(element.get_text())
                else:
                    text_parts.append(str(element))

            amount_text = ''.join(text_parts).strip()
            return clean_text(amount_text)

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        amount_elements = amount_cell.find_all(text=True)
        for text in amount_elements:
            cleaned = clean_text(text)
            if cleaned and re.search(r'\d', cleaned):
                return cleaned

        return "0"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–º–º—ã: {e}")
        return "0"


def extract_date_data(date_cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –∏–∑ —è—á–µ–π–∫–∏"""
    try:
        # –ò—â–µ–º span —Å –¥–∞—Ç–æ–π
        date_span = date_cell.find('span', class_='text-muted-foreground')
        if date_span:
            return clean_text(date_span.get_text())

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        date_elements = date_cell.find_all(text=True)
        for text in date_elements:
            cleaned = clean_text(text)
            if cleaned and re.search(r'\d', cleaned):
                return cleaned

        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"


def convert_amount_to_int(amount_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å—É–º–º—ã '1 500' –≤ —á–∏—Å–ª–æ 1500"""
    try:
        if isinstance(amount_str, (int, float)):
            return int(amount_str)

        if isinstance(amount_str, str):
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            cleaned = re.sub(r'[^\d]', '', amount_str)
            if cleaned:
                return int(cleaned)

        return 0
    except:
        return 0


def extract_guild_name_from_url(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –∏–∑ URL"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å URL –º–µ–∂–¥—É /guild/ –∏ /settings
        match = re.search(r'/guild/([^/]+)', url)
        if match:
            guild_slug = match.group(1)

            # –£–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤ –∫–æ–Ω—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, --a1172e3f)
            guild_slug_clean = re.sub(r'--[a-f0-9]{8}$', '', guild_slug)

            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–ª–∞—Å—å –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π slug
            if not guild_slug_clean:
                guild_slug_clean = guild_slug

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º slug –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            guild_name = guild_slug_clean.replace('-', ' ')

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π title case
            guild_name = ' '.join(word.capitalize() for word in guild_name.split())

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä —Ç–∏–ø–∞ "I G G D R A S I L"
            if len(guild_name) > 10 and ' ' in guild_name:
                # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±—É–∫–≤, –ø—Ä–æ–±—É–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Ö
                words = guild_name.split()
                if all(len(word) == 1 for word in words):
                    guild_name = ''.join(words).capitalize()

            print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏: '{guild_name}'")
            return guild_name

        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥–∏–ª—å–¥–∏—è"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–∏–ª—å–¥–∏–∏: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥–∏–ª—å–¥–∏—è"


def parse_table(url='https://remanga.org/guild/i-g-g-d-r-a-s-i-l--a1172e3f/settings/donations'):
    """
    –ü–∞—Ä—Å–∏—Ç –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –±—É—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Selenium
    """
    print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ URL: {url}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ Selenium
    driver = setup_driver()
    if not driver:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Selenium")
        return pd.DataFrame()

    wait = WebDriverWait(driver, 30)
    rows_data = []
    seen_records = set()
    previous_count = 0
    no_new_count = 0
    max_scroll_attempts = 20

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏
        guild_name = extract_guild_name_from_url(url)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
        print("üîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –Ω–∞ remanga.org...")
        login_success = login_to_remanga(driver)

        if not login_success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print(f"üìÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–∏–ª—å–¥–∏–∏ '{guild_name}'...")
        driver.get(url)
        time.sleep(5)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        current_url = driver.current_url
        print(f"üìÑ –¢–µ–∫—É—â–∏–π URL: {current_url}")

        if "remanga.org" not in current_url:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É. –¢–µ–∫—É—â–∏–π URL: {current_url}")
            return pd.DataFrame()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–æ –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        if "signin" in current_url or "login" in current_url:
            print("‚ùå –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            return pd.DataFrame()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page_text = driver.page_source.lower()
        if "–¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" in page_text or "access denied" in page_text or "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" in page_text:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return pd.DataFrame()

        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã...")
        try:
            wait.until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, "div[data-sentry-component*='Donations'], div[class*='table'], table")))
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ –Ω–∞–¥–µ–∂–¥–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –µ—Å—Ç—å

        print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...")
        time.sleep(3)

        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π...")

        for attempt in range(max_scroll_attempts):
            # –ü–æ–ª—É—á–∞–µ–º HTML
            page_html = driver.page_source
            soup = BeautifulSoup(page_html, 'html.parser')

            # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            table_selectors = [
                'div[data-sentry-component="VirtualizedDataTable"]',
                'div[data-sentry-component="GuildDonationsList"]',
                'div[class*="table"]',
                'table'
            ]

            table_container = None
            for selector in table_selectors:
                table_container = soup.select_one(selector)
                if table_container:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    break

            if not table_container:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ HTML")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                with open('debug_page.html', 'w', encoding='utf-8') as f:
                    f.write(page_html)
                print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: debug_page.html")
                break

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            rows = table_container.find_all('tr', style=re.compile(r'position:\s*absolute'))

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫
            if not rows:
                rows = table_container.find_all('tr')
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
                rows = [row for row in rows if row.find('td')]

            print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –Ω–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
            new_rows_found = 0
            for row in rows:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏
                    cells = row.find_all(['td', 'th'])
                    if len(cells) < 3:
                        continue

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
                    user_cell, amount_cell, date_cell = cells[0], cells[1], cells[2]

                    user = extract_user_data(user_cell)
                    amount = extract_amount_data(amount_cell)
                    date = extract_date_data(date_cell)

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if not user or user in ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'User', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π']:
                        continue

                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                    row_id = f"{user}|{amount}|{date}"

                    if row_id not in seen_records:
                        rows_data.append([user, amount, date])
                        seen_records.add(row_id)
                        new_rows_found += 1

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
                    continue

            print(f"üìà –°–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows_data)} (–Ω–æ–≤—ã—Ö: {new_rows_found})")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if len(rows_data) == previous_count:
                no_new_count += 1
                if no_new_count >= 3:
                    print("üõë –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                    break
            else:
                no_new_count = 0
                previous_count = len(rows_data)

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                scroll_selectors = [
                    "div[data-sentry-component='GuildDonationsList']",
                    "div[data-sentry-component='VirtualizedDataTable']",
                    ".table-container",
                    "div[class*='virtual']",
                    "body"
                ]

                for selector in scroll_selectors:
                    try:
                        element = driver.find_element(By.CSS_SELECTOR, selector)
                        driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", element)
                        print(f"‚¨áÔ∏è  –ü—Ä–æ–∫—Ä—É—á–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {selector}")
                        break
                    except:
                        continue
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                    print("‚¨áÔ∏è  –ü—Ä–æ–∫—Ä—É—á–µ–Ω–∞ –≤—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

                time.sleep(2)

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {e}")

        print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù")
        print(f"üìã –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows_data)}")

        # –°–æ–∑–¥–∞–µ–º DataFrame
        if rows_data:
            df = pd.DataFrame(rows_data, columns=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–°—É–º–º–∞', '–î–∞—Ç–∞'])
            df = df.drop_duplicates()

            print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç...")
            df['–°—É–º–º–∞'] = df['–°—É–º–º–∞'].apply(convert_amount_to_int)

            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –±—É—Å—Ç–æ–≤:")
            print(f"  - –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –±—É—Å—Ç–æ–≤: {len(df)}")
            print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤: {df['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'].nunique()}")
            print(f"  - –û–±—â–∞—è —Å—É–º–º–∞ –±—É—Å—Ç–æ–≤: {df['–°—É–º–º–∞'].sum():,} ‚ö°")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            df.to_csv('donations_result.csv', index=False, encoding='utf-8')
            print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ donations_result.csv")

            return df
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É—Å—Ç–æ–≤")
            return pd.DataFrame()

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        import traceback
        traceback.print_exc()
        return pd.DataFrame()
    finally:
        print("üîö –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        try:
            driver.quit()
        except:
            pass


def parse_table_for_service(url):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    return parse_table(url)


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üîß –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Selenium –ø–∞—Ä—Å–µ—Ä–∞...")

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if check_browserless_connection():
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
        result = parse_table()
        if not result.empty:
            print("\n‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
            print("üìÑ –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:")
            print(result.head())
        else:
            print("\n‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ —Å–º–æ–≥ —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Selenium")