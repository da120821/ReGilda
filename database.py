import mysql.connector
from mysql.connector import Error
import os
import logging
import re
from dotenv import load_dotenv
load_dotenv()


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class DatabaseManager:
    def __init__(self):
        self.config = {
            'host': os.getenv('DB_HOST', 'localhost'),
            'database': os.getenv('DB_NAME', 'railway'),
            'user': os.getenv('DB_USER', 'root'),
            'password': os.getenv('DB_PASSWORD', ''),
            'charset': 'utf8mb4',
            'port': int(os.getenv('DB_PORT', 3306))
        }

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            connection = mysql.connector.connect(**self.config)
            if connection.is_connected():
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL")
                return connection
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
            return None

    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not self.check_database_exists():
            if not self.create_database():
                return False

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≥–∏–ª—å–¥–∏–π
        if not self.setup_guilds_table():
            return False

        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        return True

    def ensure_guild_table_exists(self, guild_name: str):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç)"""
        if not self.check_donation_table_exists(guild_name):
            return self.create_donation_table(guild_name)
        return True

    def setup_guilds_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥–∏–ª—å–¥–∏–π"""
        connection = self.connect()
        if not connection:
            return False

        try:
            cursor = connection.cursor()
            create_table_sql = """
            CREATE TABLE IF NOT EXISTS guilds (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(100) NOT NULL UNIQUE,
                url VARCHAR(500) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """
            cursor.execute(create_table_sql)
            connection.commit()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ guilds —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            return True
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã guilds: {e}")
            return False
        finally:
            if connection.is_connected():
                connection.close()

    def save_guild(self, guild_name: str, url: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–∏–ª—å–¥–∏—é –≤ –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–ª—è –Ω–µ–µ —Ç–∞–±–ª–∏—Ü—É –¥–æ–Ω–∞—Ç–æ–≤"""
        connection = self.connect()
        if not connection:
            return False

        try:
            cursor = connection.cursor()
            sql = "INSERT INTO guilds (name, url) VALUES (%s, %s) ON DUPLICATE KEY UPDATE url = VALUES(url), is_active = TRUE"
            cursor.execute(sql, (guild_name, url))
            connection.commit()
            logger.info(f"‚úÖ –ì–∏–ª—å–¥–∏—è '{guild_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤ —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏
            self.ensure_guild_table_exists(guild_name)
            return True
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∏–ª—å–¥–∏–∏ '{guild_name}': {e}")
            return False
        finally:
            if connection.is_connected():
                connection.close()

    def load_all_guilds(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–∏–ª—å–¥–∏–∏ –∏–∑ –ë–î"""
        connection = self.connect()
        if not connection:
            return {}

        try:
            cursor = connection.cursor()
            sql = "SELECT name, url FROM guilds WHERE is_active = TRUE ORDER BY name"
            cursor.execute(sql)
            guilds = {name: url for name, url in cursor.fetchall()}
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(guilds)} –≥–∏–ª—å–¥–∏–π –∏–∑ –ë–î")
            return guilds
        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∏–ª—å–¥–∏–π –∏–∑ –ë–î: {e}")
            return {}
        finally:
            if connection.is_connected():
                connection.close()

    def get_safe_table_name(self, guild_name: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–∏–ª—å–¥–∏–∏"""
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º ID –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            normalized_name = guild_name.strip().lower()
            normalized_name = re.sub(r'\s+--[a-f0-9]{8}$', '', normalized_name)

            # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
            translit_map = {
                '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
                '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
                '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
                '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '',
                '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
            }

            # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ–º
            latin_name = ''
            for char in normalized_name:
                if char in translit_map:
                    latin_name += translit_map[char]
                elif char.isalnum() or char == ' ':
                    latin_name += char
                else:
                    latin_name += '_'

            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ
            safe_name = latin_name.replace(' ', '_')
            safe_name = re.sub(r'[^a-zA-Z0-9_]', '', safe_name)
            safe_name = re.sub(r'_+', '_', safe_name).strip('_')

            if not safe_name:
                safe_name = 'unknown_guild'

            if safe_name and safe_name[0].isdigit():
                safe_name = 'g_' + safe_name

            safe_name = 'donations_' + safe_name

            logger.info(f"üîß –°–æ–∑–¥–∞–Ω–æ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã: '{guild_name}' -> '{safe_name}'")
            return safe_name

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return 'donations_unknown_guild'

    def check_database_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            temp_config = self.config.copy()
            temp_config.pop('database', None)

            connection = mysql.connector.connect(**temp_config)
            cursor = connection.cursor()

            cursor.execute("SHOW DATABASES LIKE 'railway'")
            result = cursor.fetchone()
            exists = result is not None

            if exists:
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö railway —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.info("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö railway –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            connection.close()
            return exists

        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def create_database(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            temp_config = self.config.copy()
            temp_config.pop('database', None)

            connection = mysql.connector.connect(**temp_config)
            cursor = connection.cursor()

            cursor.execute("CREATE DATABASE IF NOT EXISTS railway")
            connection.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö railway —Å–æ–∑–¥–∞–Ω–∞")

            connection.close()
            return True

        except Error as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def check_donation_table_exists(self, guild_name: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–Ω–∞—Ç–æ–≤ –¥–ª—è –≥–∏–ª—å–¥–∏–∏"""
        connection = self.connect()
        if not connection:
            return False

        try:
            table_name = self.get_safe_table_name(guild_name)
            cursor = connection.cursor()
            cursor.execute("SHOW TABLES LIKE %s", (table_name,))
            result = cursor.fetchone()
            exists = result is not None

            if exists:
                logger.debug(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                logger.info(f"üìã –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            return exists
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return False
        finally:
            if connection.is_connected():
                connection.close()

    def create_donation_table(self, guild_name: str):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–æ–Ω–∞—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–∏–ª—å–¥–∏–∏"""
        connection = self.connect()
        if not connection:
            return False

        try:
            cursor = connection.cursor()

            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
            table_name = self.get_safe_table_name(guild_name)

            create_table_sql = f"""
            CREATE TABLE IF NOT EXISTS `{table_name}` (
              `id` int NOT NULL AUTO_INCREMENT,
              `user_name` varchar(25) DEFAULT NULL,
              `sum` int DEFAULT NULL,
              `date_buster` date DEFAULT NULL,
              `last_updated` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
              PRIMARY KEY (`id`),
              UNIQUE KEY `unique_buster_{table_name}` (`user_name`, `sum`, `date_buster`)
            );
            """
            cursor.execute(create_table_sql)
            connection.commit()
            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–æ–Ω–∞—Ç–æ–≤ {table_name} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ '{guild_name}'")
            return True

        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            return False
        finally:
            if connection.is_connected():
                connection.close()

    def get_detailed_stats(self, guild_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–∏–ª—å–¥–∏–∏"""
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not self.ensure_guild_table_exists(guild_name):
            return None

        connection = self.connect()
        if not connection:
            return None

        try:
            table_name = self.get_safe_table_name(guild_name)
            cursor = connection.cursor(dictionary=True)

            cursor.execute(f"""
                SELECT 
                    COUNT(*) as total_transactions,
                    COUNT(DISTINCT user_name) as unique_users,
                    SUM(sum) as total_amount,
                    MAX(last_updated) as last_update
                FROM `{table_name}`
            """)
            stats = cursor.fetchone()

            if stats and stats['last_update']:
                stats['last_update'] = stats['last_update'].strftime("%d.%m.%Y %H:%M")
            else:
                stats['last_update'] = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            return stats

        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {guild_name}: {e}")
            return None
        finally:
            if connection.is_connected():
                connection.close()

    def save_donations(self, df, guild_name: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–Ω–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü—É —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–∏–ª—å–¥–∏–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(df)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É –≥–∏–ª—å–¥–∏–∏ {guild_name}")

        if not self.setup_database():
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return False

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not self.ensure_guild_table_exists(guild_name):
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_name}")
            return False

        connection = self.connect()
        if not connection:
            return False

        try:
            table_name = self.get_safe_table_name(guild_name)
            cursor = connection.cursor()
            saved_count = 0
            skipped_count = 0
            error_count = 0

            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            existing_donations = self.get_existing_donations_set(guild_name)

            for _, row in df.iterrows():
                try:
                    user_name = str(row['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'])[:25]
                    amount = row['–°—É–º–º–∞']
                    date = self.parse_date(row['–î–∞—Ç–∞'])

                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–Ω–∞—Ç–∞
                    donation_id = f"{user_name}|{amount}|{date}"

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥–æ–Ω–∞—Ç –≤ –ë–î
                    if donation_id in existing_donations:
                        skipped_count += 1
                        continue

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –¥–æ–Ω–∞—Ç
                    insert_sql = f"""
                    INSERT INTO `{table_name}` (user_name, sum, date_buster)
                    VALUES (%s, %s, %s)
                    """
                    cursor.execute(insert_sql, (user_name, amount, date))
                    saved_count += 1

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                    existing_donations.add(donation_id)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {row['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']}: {e}")
                    error_count += 1

            connection.commit()
            logger.info(
                f"‚úÖ –í —Ç–∞–±–ª–∏—Ü—É {guild_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count} –Ω–æ–≤—ã—Ö, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –æ—à–∏–±–æ–∫: {error_count}")

            return True

        except Error as e:
            logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}")
            connection.rollback()
            return False
        finally:
            if connection.is_connected():
                connection.close()

    def get_existing_donations_set(self, guild_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–Ω–∞—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–∏–ª—å–¥–∏–∏"""
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not self.ensure_guild_table_exists(guild_name):
            return set()

        connection = self.connect()
        if not connection:
            return set()

        try:
            table_name = self.get_safe_table_name(guild_name)
            cursor = connection.cursor()
            cursor.execute(f"SELECT user_name, sum, date_buster FROM `{table_name}`")
            existing_records = cursor.fetchall()

            existing_donations = set()
            for user_name, amount, date in existing_records:
                donation_id = f"{user_name}|{amount}|{date}"
                existing_donations.add(donation_id)

            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(existing_donations)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–Ω–∞—Ç–æ–≤ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_name}")
            return existing_donations

        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–Ω–∞—Ç–æ–≤: {e}")
            return set()
        finally:
            if connection.is_connected():
                connection.close()

    def get_new_donations_stats(self, df, guild_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤—ã–º –¥–æ–Ω–∞—Ç–∞–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–∏–ª—å–¥–∏–∏"""
        if df.empty:
            return None

        try:
            existing_donations = self.get_existing_donations_set(guild_name)

            new_donations_count = 0
            new_donations_amount = 0
            new_donations_users = set()

            for _, row in df.iterrows():
                user_name = str(row['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'])[:25]
                amount = row['–°—É–º–º–∞']
                date = self.parse_date(row['–î–∞—Ç–∞'])

                donation_id = f"{user_name}|{amount}|{date}"

                if donation_id not in existing_donations:
                    new_donations_count += 1
                    new_donations_amount += amount
                    new_donations_users.add(user_name)

            return {
                'new_donations_count': new_donations_count,
                'new_donations_amount': new_donations_amount,
                'new_donations_users_count': len(new_donations_users)
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤: {e}")
            return None

    def parse_date(self, date_str):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç MySQL DATE"""
        try:
            months = {
                '—è–Ω–≤.': '01', '—Ñ–µ–≤.': '02', '–º–∞—Ä.': '03', '–∞–ø—Ä.': '04',
                '–º–∞—è': '05', '–∏—é–Ω.': '06', '–∏—é–ª.': '07', '–∞–≤–≥.': '08',
                '—Å–µ–Ω.': '09', '–æ–∫—Ç.': '10', '–Ω–æ—è–±.': '11', '–¥–µ–∫.': '12'
            }

            date_part = date_str.split(',')[0].strip()
            parts = date_part.split()

            if len(parts) == 3:
                day, month_ru, year = parts
                month = months.get(month_ru, '01')
                return f"{year}-{month}-{day.zfill(2)}"

            return "2025-01-01"
        except:
            return "2025-01-01"

    def get_all_donations(self, guild_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ–Ω–∞—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–∏–ª—å–¥–∏–∏"""
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not self.ensure_guild_table_exists(guild_name):
            return None

        connection = self.connect()
        if not connection:
            return None

        try:
            table_name = self.get_safe_table_name(guild_name)
            cursor = connection.cursor(dictionary=True)
            sql = f"SELECT user_name, sum, date_buster FROM `{table_name}` ORDER BY date_buster DESC, user_name ASC"
            cursor.execute(sql)
            donations = cursor.fetchall()
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(donations)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {guild_name}")
            return donations
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {guild_name}: {e}")
            return None
        finally:
            if connection.is_connected():
                connection.close()

    def delete_guild(self, guild_name: str):
        """–£–¥–∞–ª—è–µ—Ç –≥–∏–ª—å–¥–∏—é –∏–∑ –ë–î –∏ –µ—ë —Ç–∞–±–ª–∏—Ü—É –¥–æ–Ω–∞—Ç–æ–≤"""
        connection = self.connect()
        if not connection:
            return False

        try:
            cursor = connection.cursor()

            # 1. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã guilds
            delete_sql = "DELETE FROM guilds WHERE name = %s"
            cursor.execute(delete_sql, (guild_name,))

            # 2. –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–æ–Ω–∞—Ç–æ–≤ —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏
            table_name = self.get_safe_table_name(guild_name)
            drop_table_sql = f"DROP TABLE IF EXISTS `{table_name}`"
            cursor.execute(drop_table_sql)

            connection.commit()
            logger.info(f"‚úÖ –ì–∏–ª—å–¥–∏—è '{guild_name}' –∏ –µ—ë —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î")
            return True

        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–∏–ª—å–¥–∏–∏ '{guild_name}': {e}")
            return False
        finally:
            if connection.is_connected():
                connection.close()

    def get_all_donations_grouped(self, guild_name: str, limit=50):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–Ω–∞—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–∏–ª—å–¥–∏–∏ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not self.ensure_guild_table_exists(guild_name):
            return None

        connection = self.connect()
        if not connection:
            return None

        try:
            table_name = self.get_safe_table_name(guild_name)
            cursor = connection.cursor()
            sql = f"""
            SELECT 
                user_name,
                SUM(sum) as total_donated,
                COUNT(*) as donation_count
            FROM `{table_name}` 
            GROUP BY user_name 
            ORDER BY total_donated DESC
            LIMIT %s
            """
            cursor.execute(sql, (limit,))
            donations = cursor.fetchall()
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(donations)} –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {guild_name}")
            return donations
        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {guild_name}: {e}")
            return None
        finally:
            if connection.is_connected():
                connection.close()

    def clean_duplicates(self, guild_name: str):
        """–û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≥–∏–ª—å–¥–∏–∏"""
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not self.ensure_guild_table_exists(guild_name):
            return False

        connection = self.connect()
        try:
            table_name = self.get_safe_table_name(guild_name)
            cursor = connection.cursor()

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            cursor.execute(f"""
                CREATE TEMPORARY TABLE temp_{table_name} AS
                SELECT DISTINCT user_name, sum, date_buster 
                FROM `{table_name}`
            """)

            # –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            cursor.execute(f"DELETE FROM `{table_name}`")

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            cursor.execute(f"""
                INSERT INTO `{table_name}` (user_name, sum, date_buster)
                SELECT user_name, sum, date_buster FROM temp_{table_name}
            """)

            connection.commit()

            cursor.execute(f"SELECT COUNT(*) FROM `{table_name}`")
            new_count = cursor.fetchone()[0]

            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {guild_name} –æ—á–∏—â–µ–Ω–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–µ–π: {new_count}")
            return True

        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {guild_name}: {e}")
            return False
        finally:
            if connection.is_connected():
                connection.close()

    def delete_guild(self, guild_name: str):
        """–£–¥–∞–ª—è–µ—Ç –≥–∏–ª—å–¥–∏—é –∏–∑ –ë–î –∏ –µ—ë —Ç–∞–±–ª–∏—Ü—É –¥–æ–Ω–∞—Ç–æ–≤"""
        connection = self.connect()
        if not connection:
            return False

        try:
            cursor = connection.cursor()

            # 1. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã guilds
            delete_sql = "DELETE FROM guilds WHERE name = %s"
            cursor.execute(delete_sql, (guild_name,))

            # 2. –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–æ–Ω–∞—Ç–æ–≤ —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏
            table_name = self.get_safe_table_name(guild_name)
            drop_table_sql = f"DROP TABLE IF EXISTS `{table_name}`"
            cursor.execute(drop_table_sql)

            connection.commit()
            logger.info(f"‚úÖ –ì–∏–ª—å–¥–∏—è '{guild_name}' –∏ –µ—ë —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î")
            return True

        except Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–∏–ª—å–¥–∏–∏ '{guild_name}': {e}")
            return False
        finally:
            if connection.is_connected():
                connection.close()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_manager = DatabaseManager()