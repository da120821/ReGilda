import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import db_manager
import pandas as pd
from parser import parse_table
import asyncio

GUILD_URLS = {}


def create_choice_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü—ã"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—é —Ç–∞–±–ª–∏—Ü—É", callback_data="show_full")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, —Ö–≤–∞—Ç–∏—Ç", callback_data="show_partial")]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_show_more_keyboard(guild_name: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –±—É—Å—Ç–µ—Ä–æ–≤", callback_data=f"show_all_{guild_name}")],
        [InlineKeyboardButton("üìú –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±—É—Å—Ç–æ–≤", callback_data="show_full")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"refresh_{guild_name}")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_table")]
    ]
    return InlineKeyboardMarkup(keyboard)


def create_simple_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è"""
    keyboard = [
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_table")]
    ]
    return InlineKeyboardMarkup(keyboard)


def split_long_message(message: str, max_length: int = 4000):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è—è HTML-—Ä–∞–∑–º–µ—Ç–∫—É"""
    if len(message) <= max_length:
        return [message]

    parts = []
    current_part = ""
    open_tags = []

    i = 0
    while i < len(message):
        if len(current_part) >= max_length - 100:
            for tag in reversed(open_tags):
                current_part += f"</{tag}>"

            parts.append(current_part)
            current_part = ""
            for tag in open_tags:
                current_part += f"<{tag}>"

        if message[i] == '<' and i + 1 < len(message) and message[i + 1] != '/':
            tag_end = message.find('>', i)
            if tag_end != -1:
                tag_content = message[i:tag_end + 1]
                tag_name_match = re.match(r'<(\w+)', tag_content)
                if tag_name_match:
                    tag_name = tag_name_match.group(1)
                    open_tags.append(tag_name)
                current_part += tag_content
                i = tag_end + 1
                continue

        elif message[i] == '<' and i + 1 < len(message) and message[i + 1] == '/':
            tag_end = message.find('>', i)
            if tag_end != -1:
                tag_content = message[i:tag_end + 1]
                tag_name_match = re.match(r'</(\w+)', tag_content)
                if tag_name_match and open_tags:
                    tag_name = tag_name_match.group(1)
                    if tag_name in open_tags:
                        open_tags.remove(tag_name)
                current_part += tag_content
                i = tag_end + 1
                continue

        current_part += message[i]
        i += 1

    if current_part:
        for tag in reversed(open_tags):
            current_part += f"</{tag}>"
        parts.append(current_part)

    return parts


def format_stats_from_db(db_stats):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ –ë–î —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
    if not db_stats:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

    stats = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –±—É—Å—Ç–æ–≤: <code>{db_stats['total_transactions']}</code>\n"
        f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤: <code>{db_stats['unique_users']}</code>\n"
        f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: <code>{db_stats['total_amount']:,} ‚ö°</code>\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: <code>{db_stats['last_update']}</code>"
    )
    return stats


def format_full_table(df, start_idx: int = 0, chunk_size: int = None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∞—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
    if df.empty:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    if chunk_size:
        end_idx = min(start_idx + chunk_size, len(df))
        df_chunk = df.iloc[start_idx:end_idx]
        title = f"<b>üìä –¢–∞–±–ª–∏—Ü–∞ –±—É—Å—Ç–æ–≤ (—á–∞—Å—Ç—å {start_idx // chunk_size + 1})</b>\n"
        title += f"<b>–ó–∞–ø–∏—Å–∏ {start_idx + 1}-{end_idx} –∏–∑ {len(df)}</b>\n\n"
    else:
        df_chunk = df
        title = f"<b>üìä –ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –±—É—Å—Ç–æ–≤</b>\n"
        title += f"<b>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}</b>\n\n"

    table = title
    table += "<pre>"
    table += f"{'‚Ññ':<3} {'–ë—É—Å—Ç–µ—Ä':<25} {'–°—É–º–º–∞':<12} {'–î–∞—Ç–∞':<18}\n"
    table += "-" * 65 + "\n"

    for i, (_, row) in enumerate(df_chunk.iterrows(), start_idx + 1):
        user = str(row['user_name'])[:24] if pd.notna(row['user_name']) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        amount = str(row['sum'])[:11] if pd.notna(row['sum']) else "0"
        date = str(row['date_buster'])[:17] if pd.notna(row['date_buster']) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"

        table += f"{i:<3} {user:<25} {amount:<12} {date:<18}\n"

    table += "</pre>"
    return table


def format_top_donators_from_db(db_data, top_n=20, show_all=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø –±—É—Å—Ç–µ—Ä–æ–≤ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
    if not db_data:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—É—Å—Ç–µ—Ä–∞—Ö"

    if show_all:
        top_text = f"<b>üèÜ –í—Å–µ –±—É—Å—Ç–µ—Ä—ã ({len(db_data)})</b>\n\n"
    else:
        top_text = f"<b>üèÜ –¢–æ–ø-{min(top_n, len(db_data))} –±—É—Å—Ç–µ—Ä–æ–≤</b>\n\n"

    top_text += "<pre>"
    top_text += f"{'‚Ññ':<3} {'–ë—É—Å—Ç–µ—Ä':<20} {'–°—É–º–º–∞':<12} {'–ë—É—Å—Ç–æ–≤':<8}\n"
    top_text += "‚îÄ" * 45 + "\n"

    display_data = db_data if show_all else db_data[:top_n]

    for i, (user_name, total_donated, donation_count) in enumerate(display_data, 1):
        user_display = user_name[:19]
        total_formatted = f"{total_donated:,} ‚ö°".replace(",", " ")

        top_text += f"{i:<3} {user_display:<20} {total_formatted:<12} {donation_count:<8}\n"

    top_text += "</pre>"

    if not show_all and len(db_data) > top_n:
        top_text += f"\n<i>... –∏ –µ—â–µ {len(db_data) - top_n} –±—É—Å—Ç–µ—Ä–æ–≤</i>"

    return top_text


async def send_all_donators(update: Update, context: ContextTypes.DEFAULT_TYPE, guild_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—É—Å—Ç–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()

    donations_data = db_manager.get_all_donations_grouped(guild_name, limit=1000)

    if not donations_data:
        await query.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—É—Å—Ç–µ—Ä–∞—Ö")
        return

    all_donators_text = format_top_donators_from_db(donations_data, show_all=True)
    messages = split_long_message(all_donators_text, 3500)

    for i, message_part in enumerate(messages):
        if i == 0:
            keyboard = create_simple_keyboard()
            await query.message.reply_text(message_part, parse_mode='HTML', reply_markup=keyboard)
        else:
            await query.message.reply_text(message_part, parse_mode='HTML')

    await query.message.delete()


async def send_data_from_db(update: Update, context: ContextTypes.DEFAULT_TYPE, guild_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î"""
    try:
        await update.message.reply_text(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–∏–ª—å–¥–∏–∏ {guild_name} –∏–∑ –ë–î...")

        donations_data = db_manager.get_all_donations_grouped(guild_name)
        db_stats = db_manager.get_detailed_stats(guild_name)

        if not donations_data:
            await update.message.reply_text("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î (–æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
        stats_text = format_stats_from_db(db_stats)
        await update.message.reply_text(stats_text, parse_mode='HTML')

        # –°–æ–∑–¥–∞–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º –±—É—Å—Ç–µ—Ä–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        top_text = format_top_donators_from_db(donations_data, 20, show_all=False)
        # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å "... –∏ –µ—â–µ X –±—É—Å—Ç–µ—Ä–æ–≤"
        top_text = top_text.split('\n<i>... –∏ –µ—â–µ')[0]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –∏ –∫–Ω–æ–ø–∫–∏ –≤ —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        full_message = (
            f"{top_text}\n\n"
            f"üìÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: {db_stats['last_update']}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        show_more_keyboard = create_show_more_keyboard(guild_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await update.message.reply_text(
            full_message,
            parse_mode='HTML',
            reply_markup=show_more_keyboard
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['guild_name'] = guild_name

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


def format_top_donators_without_footer(db_data, top_n=20):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø –±—É—Å—Ç–µ—Ä–æ–≤ –ë–ï–ó —Ç–µ–∫—Å—Ç–∞ '... –∏ –µ—â–µ X –±—É—Å—Ç–µ—Ä–æ–≤'"""
    if not db_data:
        return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—É—Å—Ç–µ—Ä–∞—Ö"

    top_text = f"<b>üèÜ –¢–æ–ø-{min(top_n, len(db_data))} –±—É—Å—Ç–µ—Ä–æ–≤</b>\n\n"

    top_text += "<pre>"
    top_text += f"{'‚Ññ':<3} {'–ë—É—Å—Ç–µ—Ä':<20} {'–°—É–º–º–∞':<12} {'–ë—É—Å—Ç–æ–≤':<8}\n"
    top_text += "‚îÄ" * 45 + "\n"

    display_data = db_data[:top_n]

    for i, (user_name, total_donated, donation_count) in enumerate(display_data, 1):
        user_display = user_name[:19]
        total_formatted = f"{total_donated:,} ‚ö°".replace(",", " ")

        top_text += f"{i:<3} {user_display:<20} {total_formatted:<12} {donation_count:<8}\n"

    top_text += "</pre>"

    # –£–ë–ò–†–ê–ï–ú —Å—Ç—Ä–æ–∫—É —Å "... –∏ –µ—â–µ X –±—É—Å—Ç–µ—Ä–æ–≤"
    return top_text


async def send_complete_data(update: Update, context: ContextTypes.DEFAULT_TYPE, df, web_page_url: str = None,
                             guild_name: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    if df.empty:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤—ã–º –±—É—Å—Ç–∞–º
    new_stats = db_manager.get_new_donations_stats(df, guild_name)

    if new_stats and new_stats['new_donations_count'] > 0:
        new_stats_text = (
            f"<b>üÜï –ù–æ–≤—ã–µ –±—É—Å—Ç—ã:</b>\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –±—É—Å—Ç–æ–≤: <code>{new_stats['new_donations_count']}</code>\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤: <code>{new_stats['new_donations_users_count']}</code>\n"
            f"‚Ä¢ –°—É–º–º–∞ –Ω–æ–≤—ã—Ö –±—É—Å—Ç–æ–≤: <code>{new_stats['new_donations_amount']:,} ‚ö°</code>\n\n"
        )
        await update.message.reply_text(new_stats_text, parse_mode='HTML')
    else:
        await update.message.reply_text("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –±—É—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode='HTML')

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    donations_data = db_manager.get_all_donations_grouped(guild_name)
    db_stats = db_manager.get_detailed_stats(guild_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = format_stats_from_db(db_stats)
    await update.message.reply_text(stats_text, parse_mode='HTML')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø –±—É—Å—Ç–µ—Ä–æ–≤ –∏–∑ –ë–î
    if donations_data:
        top_text = format_top_donators_from_db(donations_data, 20, show_all=False)
        await update.message.reply_text(top_text, parse_mode='HTML')
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É—Å—Ç–µ—Ä–æ–≤")

    # –ü–†–ï–î–õ–ê–ì–ê–ï–ú –ü–û–ö–ê–ó–ê–¢–¨ –í–°–Æ –¢–ê–ë–õ–ò–¶–£
    choice_keyboard = create_choice_keyboard()

    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –±—É—Å—Ç–æ–≤?",
        reply_markup=choice_keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    df_renamed = df.rename(columns={
        'user_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'sum': '–°—É–º–º–∞',
        'date_buster': '–î–∞—Ç–∞'
    })

    context.user_data['guild_name'] = guild_name
    context.user_data['full_dataframe'] = df_renamed
    context.user_data['web_page_url'] = web_page_url


async def send_full_table(update: Update, context: ContextTypes.DEFAULT_TYPE, guild_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –±—É—Å—Ç–æ–≤ –∏–∑ –ë–î"""
    query = update.callback_query
    await query.answer()

    all_donations = db_manager.get_all_donations(guild_name)

    if not all_donations:
        await query.message.reply_text("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        return

    df = pd.DataFrame(all_donations)

    await query.message.reply_text("üìä –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é –±—É—Å—Ç–æ–≤ –∏–∑ –ë–î...")

    chunk_size = 25
    total_parts = (len(df) + chunk_size - 1) // chunk_size

    for part in range(total_parts):
        start_idx = part * chunk_size
        table_text = format_full_table(df, start_idx, chunk_size)

        if part == 0:
            keyboard = create_simple_keyboard()
            await query.message.reply_text(
                table_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            await query.message.reply_text(
                table_text,
                parse_mode='HTML'
            )

        await asyncio.sleep(0.5)


async def handle_table_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()

    data = query.data
    guild_name = context.user_data.get('guild_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥–∏–ª—å–¥–∏—è')

    if data == "show_full":
        await send_full_table(update, context, guild_name)
    elif data == "show_partial":
        await query.message.delete()
        await query.message.reply_text("‚úÖ –•–æ—Ä–æ—à–æ! –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ - –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞.")
    elif data == "close_table":
        await query.message.delete()


async def handle_show_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö'"""
    query = update.callback_query
    await query.answer()

    data = query.data
    guild_name = data.replace('show_all_', '')

    await send_all_donators(update, context, guild_name)


async def show_guilds_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∏–ª—å–¥–∏–π"""
    guilds_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–∏–ª—å–¥–∏–∏:\n\n"

    for i, (guild_name, url) in enumerate(GUILD_URLS.items(), 1):
        guilds_text += f"{i}. {guild_name}\n"

    guilds_text += f"\n–í—Å–µ–≥–æ –≥–∏–ª—å–¥–∏–π: {len(GUILD_URLS)}"

    await update.message.reply_text(guilds_text)


async def gettable(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str, guild_name: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å - –∏–∑ message –∏–ª–∏ callback_query
    if hasattr(update, 'message') and update.message:
        message_func = update.message.reply_text
    elif hasattr(update, 'callback_query') and update.callback_query:
        message_func = update.callback_query.message.reply_text
    else:
        return  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤—ã—Ö–æ–¥–∏–º

    await message_func("‚è≥ –ù–∞—á–∏–Ω–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã... —ç—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 2 –º–∏–Ω")

    try:

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é parse_table –∏–∑ parser.py
        df = await asyncio.to_thread(parse_table, url)

        if df.empty:
            await message_func("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")
            return

        await message_func("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!")

        web_page_url = url
        await send_complete_data(update, context, df, web_page_url, guild_name)

    except Exception as e:
        await message_func(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")