from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import asyncio
from database import db_manager
from TableToBot import GUILD_URLS, send_data_from_db, handle_table_choice, handle_show_all, gettable
import time
from collections import defaultdict
import os
from dotenv import load_dotenv
load_dotenv()

# –£–î–ê–õ–ï–ù–ê —Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ - –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –∞–Ω—Ç–∏—Ñ–ª—É–¥
from collections import defaultdict
import time

# –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–Ω—Ç–∏—Ñ–ª—É–¥)
user_last_message_time = defaultdict(float)

def is_flooding(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ"""
    current_time = time.time()
    last_time = user_last_message_time.get(user_id, 0)

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - —ç—Ç–æ —Ñ–ª—É–¥
    if current_time - last_time < 1.0:
        return True

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_last_message_time[user_id] = current_time
    return False

# URL –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –≥–∏–ª—å–¥–∏–π
GUILD_URLS = {}

def load_guilds_from_db():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–∏–ª—å–¥–∏–∏ –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    global GUILD_URLS
    GUILD_URLS = db_manager.load_all_guilds()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(GUILD_URLS)} –≥–∏–ª—å–¥–∏–π –∏–∑ –ë–î")

def create_guilds_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–∏–ª—å–¥–∏–π"""
    buttons = []
    guild_names = list(GUILD_URLS.keys())

    for i in range(0, len(guild_names), 2):
        row = [KeyboardButton(guild_names[i])]
        if i + 1 < len(guild_names):
            row.append(KeyboardButton(guild_names[i + 1]))
        buttons.append(row)

    buttons.append([KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–∏–ª—å–¥–∏—é")])
    buttons.append([KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–∏–ª—å–¥–∏—é")])

    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def add_new_guild(update: Update, context: ContextTypes.DEFAULT_TYPE, guild_name: str, url: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –≥–∏–ª—å–¥–∏—é –≤ —Å–∏—Å—Ç–µ–º—É"""
    try:
        success = db_manager.save_guild(guild_name, url)
        if success:
            GUILD_URLS[guild_name] = url
            await update.message.reply_text(
                f"‚úÖ –ì–∏–ª—å–¥–∏—è '{guild_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {guild_name}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {url}"
            )
            return True
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–∏–ª—å–¥–∏–∏ –≤ –ë–î")
            return False
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–∏–ª—å–¥–∏–∏: {e}")
        return False

async def show_guilds_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∏–ª—å–¥–∏–π"""
    guilds_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–∏–ª—å–¥–∏–∏:\n\n"
    for i, (guild_name, url) in enumerate(GUILD_URLS.items(), 1):
        guilds_text += f"{i}. {guild_name}\n"
    guilds_text += f"\n–í—Å–µ–≥–æ –≥–∏–ª—å–¥–∏–π: {len(GUILD_URLS)}"
    await update.message.reply_text(guilds_text)

# –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ check_user_availability
async def handle_add_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–∏–ª—å–¥–∏–∏"""
    await update.message.reply_text(
        "üìù –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥–∏–ª—å–¥–∏—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "‚û§ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏</b>\n"
        "‚û§ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–Ω–∞—Ç—ã</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>–ú–æ—è–ì–∏–ª—å–¥–∏—è\n"
        "https://remanga.org/guild/moya-gildiya/settings/donations</code>\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —è –ø—Ä–∏–¥—É–º–∞—é —Å–∞–º–∞! üòä",
        parse_mode='HTML'
    )
    context.user_data['awaiting_guild_data'] = True

# –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ check_user_availability
async def handle_guild_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≥–∏–ª—å–¥–∏–∏"""
    if context.user_data.get('awaiting_guild_data'):
        try:
            user_input = update.message.text.strip()
            if '\n' in user_input:
                lines = user_input.split('\n')
                guild_name = lines[0].strip()
                url = lines[1].strip()
            else:
                url = user_input
                guild_name = url.split('/guild/')[-1].split('/')[0]
                guild_name = guild_name.replace('-', ' ').title()

            if not url.startswith('https://remanga.org/guild/') or not url.endswith('/settings/donations'):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n"
                    "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–∞:\n"
                    "https://remanga.org/guild/–ù–ê–ó–í–ê–ù–ò–ï/settings/donations"
                )
                return

            success = await add_new_guild(update, context, guild_name, url)
            if success:
                markup = create_guilds_keyboard()
                await update.message.reply_text(
                    "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –≥–∏–ª—å–¥–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:",
                    reply_markup=markup
                )
            context.user_data['awaiting_guild_data'] = False
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            context.user_data['awaiting_guild_data'] = False
    else:
        await handle_other_messages(update, context)

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥ –∏ —É–±—Ä–∞–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
async def handle_guild_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–∏–ª—å–¥–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥
    if is_flooding(user_id):
        await update.message.reply_text(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 1 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É."
        )
        return

    try:
        if text in GUILD_URLS:
            await send_data_from_db(update, context, text)
        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–∏–ª—å–¥–∏—é":
            await handle_add_guild(update, context)
        elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–∏–ª—å–¥–∏—é":
            await handle_delete_guild(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ check_callback_availability
async def handle_refresh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"""
    query = update.callback_query
    await query.answer()

    try:
        data = query.data
        guild_name = data.replace('refresh_', '')
        url = GUILD_URLS[guild_name]
        await gettable(update, context, url, guild_name)
    except Exception as e:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è"""
    query = update.callback_query
    await query.answer()

    if query.data == "close_table":
        await query.message.delete()

# –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ check_user_availability
async def handle_other_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ —Ö–æ—á—É –æ–±—â–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–¥–∞–Ω–Ω—ã –º–æ–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.")
    await asyncio.sleep(0.3)
    await update.message.reply_text("–õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–∏–ª—å–¥–∏–∏ —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    markup = create_guilds_keyboard()
    await asyncio.sleep(0.5)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –†–∞–¥–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å!")
    await asyncio.sleep(1.2)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–∏–ª—å–¥–∏—é —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å.",
        reply_markup=markup
    )

# –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ check_user_availability
async def handle_delete_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≥–∏–ª—å–¥–∏–∏"""
    if not GUILD_URLS:
        await update.message.reply_text("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –≥–∏–ª—å–¥–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    keyboard = []
    for guild_name in GUILD_URLS.keys():
        keyboard.append([InlineKeyboardButton(f"üóëÔ∏è {guild_name}", callback_data=f"delete_{guild_name}")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–∏–ª—å–¥–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

# –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ set_user_processing
async def handle_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥–∏–ª—å–¥–∏–π"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "cancel_delete":
        await query.message.delete()
        await query.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    if data.startswith("delete_"):
        guild_name = data.replace("delete_", "")
        if guild_name not in GUILD_URLS:
            await query.message.reply_text(f"‚ùå –ì–∏–ª—å–¥–∏—è '{guild_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        confirm_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{guild_name}")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")]
        ])

        await query.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–∏–ª—å–¥–∏—é '{guild_name}'?\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=confirm_keyboard
        )

    elif data.startswith("confirm_delete_"):
        guild_name = data.replace("confirm_delete_", "")
        success = db_manager.delete_guild(guild_name)
        if success:
            del GUILD_URLS[guild_name]
            await query.message.edit_text(
                f"‚úÖ –ì–∏–ª—å–¥–∏—è '{guild_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n\n"
                f"–¢–∞–±–ª–∏—Ü–∞ –¥–æ–Ω–∞—Ç–æ–≤ —Ç–∞–∫–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
            )
            markup = create_guilds_keyboard()
            await query.message.reply_text("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=markup)
        else:
            await query.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–∏–ª—å–¥–∏–∏ '{guild_name}'\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )

# –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ check_user_availability
async def list_guilds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–∏–ª—å–¥–∏–π"""
    await show_guilds_list(update, context)

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–∏–ª—å–¥–∏–∏
    db_manager.setup_guilds_table()
    load_guilds_from_db()

    TOKEN = os.getenv('BOT_TOKEN')
    if not TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)

    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("guilds", list_guilds))
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º handle_guild_buttons –≤–º–µ—Å—Ç–æ universal_message_handler
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guild_buttons))
    application.add_handler(CallbackQueryHandler(handle_show_all, pattern="^show_all_"))
    application.add_handler(CallbackQueryHandler(handle_pagination, pattern="^close_table$"))
    application.add_handler(CallbackQueryHandler(handle_table_choice, pattern="^(show_full|show_partial)$"))
    application.add_handler(CallbackQueryHandler(handle_refresh, pattern="^refresh_"))
    application.add_handler(CallbackQueryHandler(handle_delete_callback, pattern="^(delete_|confirm_delete_|cancel_delete)"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")
    application.run_polling()